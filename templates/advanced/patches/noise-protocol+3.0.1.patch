diff --git a/node_modules/noise-protocol/cipher.js b/node_modules/noise-protocol/cipher.js
index 7a3a29a..ba34dc5 100644
--- a/node_modules/noise-protocol/cipher.js
+++ b/node_modules/noise-protocol/cipher.js
@@ -1,5 +1,5 @@
 /* eslint-disable camelcase */
-const { sodium_malloc, sodium_memzero } = require('sodium-universal/memory')
+const { sodium_memzero } = require('sodium-universal/memory')
 const {
   crypto_aead_chacha20poly1305_ietf_KEYBYTES,
   crypto_aead_chacha20poly1305_ietf_NPUBBYTES,
@@ -28,7 +28,7 @@ module.exports = {
   rekey
 }
 
-var ElongatedNonce = sodium_malloc(crypto_aead_chacha20poly1305_ietf_NPUBBYTES)
+var ElongatedNonce = Buffer.alloc(crypto_aead_chacha20poly1305_ietf_NPUBBYTES)
 function encrypt (out, k, n, ad, plaintext) {
   assert(out.byteLength >= plaintext.byteLength + MACLEN, 'output buffer must be at least plaintext plus MACLEN bytes long')
   assert(k.byteLength === KEYLEN)
@@ -67,7 +67,7 @@ var maxnonce = new Uint8Array(8).fill(0xff)
 var zerolen = new Uint8Array(0)
 var zeros = new Uint8Array(32)
 
-var IntermediateKey = sodium_malloc(KEYLEN + MACLEN)
+var IntermediateKey = Buffer.alloc(KEYLEN + MACLEN)
 sodium_memzero(IntermediateKey)
 function rekey (out, k) {
   assert(out.byteLength === KEYLEN)
diff --git a/node_modules/noise-protocol/handshake-state.js b/node_modules/noise-protocol/handshake-state.js
index a107360..b1aed03 100644
--- a/node_modules/noise-protocol/handshake-state.js
+++ b/node_modules/noise-protocol/handshake-state.js
@@ -1,5 +1,5 @@
 /* eslint-disable camelcase */
-const { sodium_malloc, sodium_memzero, sodium_free } = require('sodium-universal/memory')
+const { sodium_memzero, sodium_free } = require('sodium-universal/memory')
 const assert = require('nanoassert')
 const clone = require('clone')
 const symmetricState = require('./symmetric-state')
@@ -21,7 +21,7 @@ module.exports = Object.freeze({
 })
 
 function HandshakeState () {
-  this.symmetricState = sodium_malloc(symmetricState.STATELEN)
+  this.symmetricState = Buffer.alloc(symmetricState.STATELEN)
 
   this.initiator = null
 
@@ -178,7 +178,7 @@ var PATTERNS = Object.freeze({
 })
 
 function sodiumBufferCopy (src) {
-  var buf = sodium_malloc(src.byteLength)
+  var buf = Buffer.alloc(src.byteLength)
   buf.set(src)
   return buf
 }
@@ -260,7 +260,7 @@ function initialize (handshakePattern, initiator, prologue, s, e, rs, re) {
   return state
 }
 
-var DhResult = sodium_malloc(dh.DHLEN)
+var DhResult = Buffer.alloc(dh.DHLEN)
 function writeMessage (state, payload, messageBuffer) {
   assert(state instanceof HandshakeState)
   assert(payload.byteLength != null)
@@ -279,8 +279,8 @@ function writeMessage (state, payload, messageBuffer) {
         assert(state.epk == null)
         assert(state.esk == null)
 
-        state.epk = sodium_malloc(dh.PKLEN)
-        state.esk = sodium_malloc(dh.SKLEN)
+        state.epk = Buffer.alloc(dh.PKLEN)
+        state.esk = Buffer.alloc(dh.SKLEN)
 
         dh.generateKeypair(state.epk, state.esk)
 
@@ -336,8 +336,8 @@ function writeMessage (state, payload, messageBuffer) {
   writeMessage.bytes = moffset
 
   if (state.messagePatterns.length === 0) {
-    var tx = sodium_malloc(cipherState.STATELEN)
-    var rx = sodium_malloc(cipherState.STATELEN)
+    var tx = Buffer.alloc(cipherState.STATELEN)
+    var rx = Buffer.alloc(cipherState.STATELEN)
     symmetricState.split(state.symmetricState, tx, rx)
 
     return { tx, rx }
@@ -363,7 +363,7 @@ function readMessage (state, message, payloadBuffer) {
         assert(message.byteLength - moffset >= dh.PKLEN)
 
         // PKLEN instead of DHLEN since they are different in out case
-        state.re = sodium_malloc(dh.PKLEN)
+        state.re = Buffer.alloc(dh.PKLEN)
         state.re.set(message.subarray(moffset, moffset + dh.PKLEN))
         moffset += dh.PKLEN
 
@@ -373,7 +373,7 @@ function readMessage (state, message, payloadBuffer) {
 
       case TOK_S:
         assert(state.rs == null)
-        state.rs = sodium_malloc(dh.PKLEN)
+        state.rs = Buffer.alloc(dh.PKLEN)
 
         var bytes = 0
         if (symmetricState._hasKey(state.symmetricState)) {
@@ -430,8 +430,8 @@ function readMessage (state, message, payloadBuffer) {
   readMessage.bytes = symmetricState.decryptAndHash.bytesWritten
 
   if (state.messagePatterns.length === 0) {
-    var tx = sodium_malloc(cipherState.STATELEN)
-    var rx = sodium_malloc(cipherState.STATELEN)
+    var tx = Buffer.alloc(cipherState.STATELEN)
+    var rx = Buffer.alloc(cipherState.STATELEN)
     symmetricState.split(state.symmetricState, rx, tx)
 
     return { tx, rx }
@@ -482,7 +482,7 @@ function destroy (state) {
 
 function keygen (obj, sk) {
   if (!obj) {
-    obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }
+    obj = { publicKey: Buffer.alloc(PKLEN), secretKey: Buffer.alloc(SKLEN) }
     return keygen(obj)
   }
 
@@ -495,7 +495,7 @@ function keygen (obj, sk) {
 }
 
 function seedKeygen (seed) {
-  var obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }
+  var obj = { publicKey: Buffer.alloc(PKLEN), secretKey: Buffer.alloc(SKLEN) }
   dh.generateSeedKeypair(obj.publicKey, obj.secretKey, seed)
   return obj
 }
diff --git a/node_modules/noise-protocol/hash.js b/node_modules/noise-protocol/hash.js
index 6ef1a7c..d92ccc0 100644
--- a/node_modules/noise-protocol/hash.js
+++ b/node_modules/noise-protocol/hash.js
@@ -1,5 +1,5 @@
 /* eslint-disable camelcase */
-const { sodium_malloc, sodium_memzero } = require('sodium-universal/memory')
+const { sodium_memzero } = require('sodium-universal/memory')
 const { crypto_generichash_batch } = require('sodium-universal/crypto_generichash')
 
 const assert = require('nanoassert')
@@ -30,7 +30,7 @@ function hmac (out, key, data) {
   return hmacBlake2b(out, data, key)
 }
 
-const TempKey = sodium_malloc(HASHLEN)
+const TempKey = Buffer.alloc(HASHLEN)
 const Byte0x01 = new Uint8Array([0x01])
 const Byte0x02 = new Uint8Array([0x02])
 const Byte0x03 = new Uint8Array([0x03])
diff --git a/node_modules/noise-protocol/symmetric-state.js b/node_modules/noise-protocol/symmetric-state.js
index c109d62..ac04a5c 100644
--- a/node_modules/noise-protocol/symmetric-state.js
+++ b/node_modules/noise-protocol/symmetric-state.js
@@ -1,5 +1,5 @@
 /* eslint-disable camelcase */
-const { sodium_malloc, sodium_memzero } = require('sodium-universal/memory')
+const { sodium_memzero } = require('sodium-universal/memory')
 var assert = require('nanoassert')
 var cipherState = require('./cipher-state')
 var hash = require('./hash')
@@ -40,7 +40,7 @@ function initializeSymmetric (state, protocolName) {
   cipherState.initializeKey(state.subarray(CIPHER_BEGIN, CIPHER_END), null)
 }
 
-var TempKey = sodium_malloc(HASHLEN)
+var TempKey = Buffer.alloc(HASHLEN)
 function mixKey (state, inputKeyMaterial) {
   assert(state.byteLength === STATELEN)
   assert(inputKeyMaterial.byteLength != null)
@@ -66,7 +66,7 @@ function mixHash (state, data) {
   hash.hash(h, [h, data])
 }
 
-var TempHash = sodium_malloc(HASHLEN)
+var TempHash = Buffer.alloc(HASHLEN)
 function mixKeyAndHash (state, inputKeyMaterial) {
   assert(state.byteLength === STATELEN)
   assert(inputKeyMaterial.byteLength != null)
@@ -128,8 +128,8 @@ function decryptAndHash (state, plaintext, ciphertext) {
 decryptAndHash.bytesRead = 0
 decryptAndHash.bytesWritten = 0
 
-var TempKey1 = sodium_malloc(HASHLEN)
-var TempKey2 = sodium_malloc(HASHLEN)
+var TempKey1 = Buffer.alloc(HASHLEN)
+var TempKey2 = Buffer.alloc(HASHLEN)
 var zerolen = new Uint8Array(0)
 function split (state, cipherstate1, cipherstate2) {
   assert(state.byteLength === STATELEN)
